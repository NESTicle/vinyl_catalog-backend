// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VinylCollection.Data.Models.Base;

namespace VinylCollection.Data.Migrations
{
    [DbContext(typeof(VinylDbContext))]
    [Migration("20210715001018_update_table--country__code")]
    partial class update_tablecountry__code
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.7")
                .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

            modelBuilder.Entity("VinylCollection.Data.Models.Communities.Community", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Background")
                        .HasColumnType("text");

                    b.Property<int>("CommentRule")
                        .HasColumnType("integer");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .HasMaxLength(2000)
                        .HasColumnType("character varying(2000)");

                    b.Property<int>("Id_User")
                        .HasColumnType("integer");

                    b.Property<string>("Image")
                        .HasColumnType("text");

                    b.Property<bool>("NSFW")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("PublishRule")
                        .HasColumnType("integer");

                    b.Property<string>("URL")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Id_User");

                    b.ToTable("Communities", "Community");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.Country", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Code")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.ToTable("Countries", "Parameters");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.Genre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.ToTable("Genres", "Parameters");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.SubGenre", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Id_Genre")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.HasKey("Id");

                    b.HasIndex("Id_Genre");

                    b.HasIndex("Id", "Name")
                        .IsUnique();

                    b.ToTable("SubGenres", "Parameters");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Security.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<bool>("IsEmailValid")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("Users", "Security");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Vinyls.Vinyl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<string>("Album")
                        .HasColumnType("text");

                    b.Property<string>("Band")
                        .HasColumnType("text");

                    b.Property<string>("Color")
                        .HasColumnType("text");

                    b.Property<string>("CoverURL")
                        .HasColumnType("text");

                    b.Property<string>("Currency")
                        .HasColumnType("text");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime>("DateReleased")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Disc")
                        .HasColumnType("integer");

                    b.Property<int>("Id_Country")
                        .HasColumnType("integer");

                    b.Property<int>("Id_SubGenre")
                        .HasColumnType("integer");

                    b.Property<int>("Id_User")
                        .HasColumnType("integer");

                    b.Property<int>("Id_VinylFormat")
                        .HasColumnType("integer");

                    b.Property<string>("Info")
                        .HasColumnType("text");

                    b.Property<string>("Link")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<decimal>("Price")
                        .HasColumnType("Money");

                    b.Property<string>("Type")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.HasIndex("Id_Country");

                    b.HasIndex("Id_SubGenre");

                    b.HasIndex("Id_User");

                    b.HasIndex("Id_VinylFormat");

                    b.ToTable("Vinyl", "Vinyl");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Vinyls.VinylFormat", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Npgsql:ValueGenerationStrategy", NpgsqlValueGenerationStrategy.IdentityByDefaultColumn);

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("Deleted")
                        .HasColumnType("boolean");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(300)
                        .HasColumnType("character varying(300)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(80)
                        .HasColumnType("character varying(80)");

                    b.HasKey("Id");

                    b.HasIndex("Id")
                        .IsUnique();

                    b.ToTable("VinylFormats", "Vinyl");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Communities.Community", b =>
                {
                    b.HasOne("VinylCollection.Data.Models.Security.User", "User")
                        .WithMany("Communities")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.SubGenre", b =>
                {
                    b.HasOne("VinylCollection.Data.Models.Parameters.Genre", "Genre")
                        .WithMany("SubGenres")
                        .HasForeignKey("Id_Genre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Genre");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Vinyls.Vinyl", b =>
                {
                    b.HasOne("VinylCollection.Data.Models.Parameters.Country", "Country")
                        .WithMany("Vinyls")
                        .HasForeignKey("Id_Country")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VinylCollection.Data.Models.Parameters.SubGenre", "SubGenre")
                        .WithMany("Vinyls")
                        .HasForeignKey("Id_SubGenre")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VinylCollection.Data.Models.Security.User", "User")
                        .WithMany("Vinyls")
                        .HasForeignKey("Id_User")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VinylCollection.Data.Models.Vinyls.VinylFormat", "VinylFormat")
                        .WithMany("Vinyls")
                        .HasForeignKey("Id_VinylFormat")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Country");

                    b.Navigation("SubGenre");

                    b.Navigation("User");

                    b.Navigation("VinylFormat");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.Country", b =>
                {
                    b.Navigation("Vinyls");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.Genre", b =>
                {
                    b.Navigation("SubGenres");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Parameters.SubGenre", b =>
                {
                    b.Navigation("Vinyls");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Security.User", b =>
                {
                    b.Navigation("Communities");

                    b.Navigation("Vinyls");
                });

            modelBuilder.Entity("VinylCollection.Data.Models.Vinyls.VinylFormat", b =>
                {
                    b.Navigation("Vinyls");
                });
#pragma warning restore 612, 618
        }
    }
}
